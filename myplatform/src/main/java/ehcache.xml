<?xml version="1.0" encoding="UTF-8"?>
<ehcache>
	<!-- 数据缓存存放目录 -->
	<diskStore path="D:/ehcache" />

		<!-- 
		   页面缓存
		   三种缓存算法：LRU-最近最少使用、LFU-较少频率使用和FIFO-先进先出。
		
		  参数详解：
		   simplePageCachingFilter 缓存的名称
		   maxElementsInMemory 缓存中元素的最大数量
		   maxElementsOnDisk 持久化到硬盘的缓存元素的最大数量
		   eternal="false"  如果为true，表示对象永远不会过期，此时会忽略timeToIdleSeconds和timeToLiveSeconds属性，默认为false;
		   overflowToDisk="true" 当缓存中元素数量超过限制时，将这些元素持久化到硬盘，为false时，设置没意义。
		   timeToIdleSeconds 多长时间不访问缓存，那么就清除该缓存
		   timeToLiveSeconds 缓存的存活时间
	   -->
	<defaultCache 
	    maxElementsInMemory="10000" 
	    eternal="false"
		timeToIdleSeconds="120" 
		timeToLiveSeconds="120" 
		overflowToDisk="true"
		maxElementsOnDisk="10000000" 
		diskPersistent="false"
		diskExpiryThreadIntervalSeconds="120" 
		memoryStoreEvictionPolicy="LRU" />
		
		<!--  
		 java文件注解查找cache方法名的策略：如果不指定java文件注解中的region="ehcache.xml中的name的属性值",   
		    则使用name名为com.lysoft.bean.user.User的cache(即类的全路径名称), 如果不存在与类名匹配的cache名称, 则用 defaultCache  
		    如果User包含set集合, 则需要另行指定其cache  
		    例如User包含citySet集合, 则也需要  
		    添加配置到ehcache.xml中  
        -->      


       <!-- 
        ehcache不支持transactional，其他三种可以支持。
		read-only：无需修改， 那么就可以对其进行只读 缓存，注意，在此策略下，如果直接修改数据库，即使能够看到前台显示效果，
		但是将对象修改至cache中会报error，cache不会发生作用。另：删除记录会报错，因为不能在read-only模式的对象从cache中删除。
		read-write：需要更新数据，那么使用读/写缓存 比较合适，前提：数据库不可以为serializable transaction isolation level
		（序列化事务隔离级别）
		nonstrict-read-write：只偶尔需要更新数据（也就是说，两个事务同时更新同一记录的情况很不常见），也不需要十分严格的事务隔离，
		那么比较适合使用非严格读/写缓存策略。
        -->
</ehcache>